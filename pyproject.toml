[project]
name = "dev-tools-mcp"
version = "0.1.0"
description = "A standalone MCP server providing a toolkit for software development."
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "click>=8.0.0",
    "jsonpath-ng>=1.7.0",
    "pydantic>=2.0.0",
    "python-dotenv>=1.0.0",
    "rich>=13.0.0",
    "tree-sitter-languages==1.10.2",
    "tree-sitter==0.21.3",
    "mcp>=1.12.4",
    "fastapi>=0.115.14",
    "pyyaml>=6.0.2"
]

[project.optional-dependencies]
test = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-mock>=3.12.0",
    "pytest-cov>=4.0.0",
    "pre-commit>=4.2.0",
]

[project.scripts]
dev-tools-server = "dev_tools_mcp.main:run_server"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["dev_tools_mcp"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["dev_tools_mcp"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]


[tool.ruff]
line-length = 100

[tool.ruff.lint]
select = [
    "B",
    "SIM",
    "C4",
    "E4", "E9", "E7", "F",
    "I"
]

[dependency-groups]
dev = [
    "types-pyyaml>=6.0.12.20250516",
]
